generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User_Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  tagline         String?
  location        String?
  followers_count Int      @default(0)
  following_count Int      @default(0)
  website_url     String?
  github_url      String?
  linkedin_url    String?
  twitter_url     String?
  available_for   String?
  tech_stack      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model User {
  id                String              @id @default(uuid())
  name              String
  username          String?             @unique
  email             String?             @unique
  password          String?
  emailVerified     DateTime?           @map("email_verified")
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accounts          Account[]
  sessions          Session[]
  profile           User_Profile?
  bookmark_category bookmark_category[]
  likes             blog_like[]
  comments          blog_comment[]
  reading_history   Reading_history[]
  blog_authored     Blog[]

  @@unique([email, username])
  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model bookmark_category {
  id            String                   @id @default(cuid())
  title         String
  description   String?
  userId        String
  user          User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  category_blog bookmark_category_blog[]

  @@map("bookmark_categories")
}

model bookmark_category_blog {
  id         String            @id @default(cuid())
  categoryId String
  note       String?
  blogId     String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  blog       Blog              @relation(fields: [blogId], references: [id], onDelete: Cascade)
  category   bookmark_category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("bookmark_category_blogs")
}

model blog_like {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@map("blog_likes")
}

model blog_comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, blogId])
  @@map("blog_comments")
}

model blog_topic {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog[]

  @@map("blog_topics")
}

enum BlogStatus {
  PUBLISHED
  DRAFT
}

model Blog {
  id                 String                   @id @default(cuid())
  title              String
  markdown_file_url  String
  markdown_file_name String
  blog_status        BlogStatus
  short_description  String
  number_of_views    Int                      @default(0)
  number_of_likes    Int                      @default(0)
  number_of_comments Int                      @default(0)
  authorId           String
  embeddings         Int[]
  reading_time       Int                      @default(0)
  topicId            String
  banner_img         String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  user               User                     @relation(fields: [authorId], references: [id])
  topic              blog_topic               @relation(fields: [topicId], references: [id])
  comments           blog_comment[]
  likes              blog_like[]
  reading_history    Reading_history[]
  category_blog      bookmark_category_blog[]
  blog_stats         blog_stat[]

  @@map("blogs")
}

model Reading_history {
  id         String   @id @default(cuid())
  userId     String?
  blogId     String
  referrer   String?
  browser    String?
  os         String?
  device     String?
  ip_address String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  blog       Blog     @relation(fields: [blogId], references: [id])

  @@index([blogId])
  @@map("reading_histories")
}

model blog_stat {
  id                 String   @id @default(cuid())
  blogId             String
  number_of_views    Int      @default(0)
  number_of_likes    Int      @default(0)
  number_of_comments Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  blog               Blog     @relation(fields: [blogId], references: [id])

  @@index([createdAt])
  @@index([blogId, createdAt])
  @@map("blog_stats")
}
